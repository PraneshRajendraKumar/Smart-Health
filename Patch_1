#include <Wire.h>
#include "HX711.h"
#define calibration_factor 10700.0 
#define LOADCELL_DOUT_PIN  4
#define LOADCELL_SCK_PIN  5
int i = 0;
#include "MAX30105.h"
#include "spo2_algorithm.h"
int userInput = 0;
MAX30105 particleSensor;
HX711 scale;
byte pulseLED = 11; //Must be on PWM pin
byte readLED = 13; //Blinks with each data read
#include <Adafruit_MLX90614.h>
Adafruit_MLX90614 mlx = Adafruit_MLX90614();
int pulsePin = 0;                 
int blinkPin = 13;                
int fadePin = 8;                  
int fadeRate = 0;                 
volatile int BPM;                   
volatile int Signal;                
volatile int IBI = 600;             
volatile boolean Pulse = false;     
volatile boolean QS = false;        
static boolean serialVisual = true;   
volatile int rate[10];                      
volatile unsigned long sampleCounter = 0;          
volatile unsigned long lastBeatTime = 0;           
volatile int P = 512;                      
volatile int T = 512;                     
volatile int thresh = 525;                
volatile int amp = 100;                   
volatile boolean firstBeat = true;        
volatile boolean secondBeat = false; 
unsigned long t = 0;
float a ;
float avg;
void setup() {
pinMode(22,OUTPUT); 
pinMode(23,OUTPUT); 
pinMode(24,OUTPUT);
pinMode(25,OUTPUT);
pinMode(46,OUTPUT);
pinMode(47,OUTPUT);
pinMode(48,OUTPUT);
pinMode(49,OUTPUT);
pinMode(50,OUTPUT);
pinMode(51,OUTPUT);
pinMode(52,OUTPUT);
  Serial.begin(9600);
  digitalWrite(50,HIGH);
  delay(1000);
  setupweight();
  setupSpO2();
  setuptemp();
  setuppulse();
}
void loop() {
  digitalWrite(50,LOW);
  digitalWrite(51,HIGH);
  serialEvent();
  switch (userInput) {
    case 1:
      Serial.flush();
      measureweight();
      userInput = 0;
      break;
    case 2:
      Serial.flush();   
      measuretemp();
      userInput = 0; 
      break;
    case 3:
      Serial.flush();
      measurepulse();
      userInput = 0; 
      break;
    case 4:
      Serial.flush();
      measureSpO2();
      userInput = 0;
      break;     
}
}
void serialEvent() {
  int liveUserData = Serial.parseInt();
  if (liveUserData != 0) {
    userInput = liveUserData;
  }
}
void setuptemp() {
  Serial.println("Sensor Ready You can check the temperature"); 
  digitalWrite(52,HIGH);
  delay(1000);
  digitalWrite(52,LOW); 
  mlx.begin();  
}
void measuretemp() {
  digitalWrite(48,HIGH);
  digitalWrite(49,LOW);
  digitalWrite(23,LOW);
  digitalWrite(25,LOW);
  digitalWrite(47,LOW);
  Serial.println("Wait for 5 seconds");
  float sum = 0;
for (int i=0; i<10; i++) 
{
  a = (mlx.readObjectTempF());
  sum = sum + a;
  avg = sum/10;
  delay(500);
  }
  Serial.print("Your temperature in *F is:");Serial.println(avg);
  digitalWrite(52,HIGH);
  delay(1000);
  digitalWrite(52,LOW);
  digitalWrite(48,LOW);
  digitalWrite(49,HIGH);
}
void setupweight() {
  Serial.println("Weighing Scale");
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(calibration_factor); 
  scale.tare(); 

  Serial.println("Your Weight is :");
}
void measureweight() {
  digitalWrite(22,HIGH);
  digitalWrite(23,LOW);
  digitalWrite(25,LOW);
  digitalWrite(47,LOW);
  digitalWrite(49,LOW);
  Serial.println("Wait for 5 seconds");
   float sum = 0;
  for (i=0;i<10;i++)
  { 
  a = (scale.get_units()/2.205); 
  sum = sum + a;
  avg = sum/10;
  delay(500);
}
  Serial.print("Your weight in kgs is:");Serial.println(avg);
  digitalWrite(52,HIGH);
  delay(1000);
  digitalWrite(52,LOW);
  digitalWrite(22,LOW);
  digitalWrite(23,HIGH);
}
void setuppulse() {
  pinMode(blinkPin,OUTPUT);         
  pinMode(fadePin,OUTPUT);                      
  interruptSetup();  
}
void measurepulse(){
  digitalWrite(46,HIGH);
  digitalWrite(23,LOW);
  digitalWrite(25,LOW);
  digitalWrite(47,LOW);
  digitalWrite(49,LOW);
  Serial.println("Wait for 5 seconds");
  float sum = 0;
   serialOutput();  
   
  if (QS == true) 
    {     
      fadeRate = 255; 
      serialOutputWhenBeatHappens(); 
      QS = false; 
    }
     
  ledFadeToBeat(); 
  delay(200);  
  }

void ledFadeToBeat()
{
   fadeRate -= 15;                         
   fadeRate = constrain(fadeRate,0,255);   
   analogWrite(fadePin,fadeRate);          
}

void interruptSetup()
{     
  TCCR2A = 0x02;     
  TCCR2B = 0x06;     
  OCR2A = 0X7C;      
  TIMSK2 = 0x02;     
  sei();             
} 

void serialOutput()
{   
 if (serialVisual == true)
  {  
     arduinoSerialMonitorVisual('-', Signal);   
  } 
 else
  {
      sendDataToSerial('S', Signal);     
   }        
}

void serialOutputWhenBeatHappens()
{    
float sum = 0;
for (int i=0; i<10; i++) {
 if (serialVisual == true) 
   {    
  a = (BPM);
  sum = sum + a;
  avg = sum/10;
  delay(500);
}
   
 else
   {
     sendDataToSerial('B',BPM);   
     sendDataToSerial('Q',IBI);   
   }
}
  Serial.print("Your BPM is:");Serial.println(avg);        
  digitalWrite(52,HIGH);
  delay(1000);
  digitalWrite(52,LOW);
  digitalWrite(46,LOW);
  digitalWrite(47,HIGH);
}

void arduinoSerialMonitorVisual(char symbol, int data )
{    
  const int sensorMin = 0;     
  const int sensorMax = 1024;    
  int sensorReading = data; 
  int range = map(sensorReading, sensorMin, sensorMax, 0, 11);
}

void sendDataToSerial(char symbol, int data )
{
   Serial.print(symbol);
   Serial.println(data);                
}

ISR(TIMER2_COMPA_vect) 
{  
  cli();                                      
  Signal = analogRead(pulsePin);              
  sampleCounter += 2;                         
  int N = sampleCounter - lastBeatTime;       
                                              
  if(Signal < thresh && N > (IBI/5)*3) 
    {      
      if (Signal < T) 
      {                        
        T = Signal;   
      }
    }

  if(Signal > thresh && Signal > P)
    {          
      P = Signal;                            
    }                                        
  if (N > 250)
  {                                   
    if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) )
      {        
        Pulse = true;                               
        digitalWrite(blinkPin,HIGH);                
        IBI = sampleCounter - lastBeatTime;         
        lastBeatTime = sampleCounter;               
  
        if(secondBeat)
        {                        
          secondBeat = false;                 
          for(int i=0; i<=9; i++) 
          {             
            rate[i] = IBI;                      
          }
        }
  
        if(firstBeat) 
        {                         
          firstBeat = false;                   
          secondBeat = true;                   
          sei();                               
          return;                              
        }   
      word runningTotal = 0;                     

      for(int i=0; i<=8; i++)
        {                
          rate[i] = rate[i+1];                   
          runningTotal += rate[i];              
        }

      rate[9] = IBI;                          
      runningTotal += rate[9];                
      runningTotal /= 10;                     
      BPM = 60000/runningTotal;               
      QS = true;                              
      
    }                       
  }

  if (Signal < thresh && Pulse == true)
    {   
      digitalWrite(blinkPin,LOW);            
      Pulse = false;                         
      amp = P - T;                           
      thresh = amp/2 + T;                    
      P = thresh;                            
      T = thresh;
    }

  if (N > 2500)
    {                           
      thresh = 512;                          
      P = 512;                               
      T = 512;                               
      lastBeatTime = sampleCounter;                 
      firstBeat = true;                      
      secondBeat = false;                    
    }

  sei();                                   
}

//
//
//
void setupSpO2() {
pinMode(pulseLED, OUTPUT);
pinMode(readLED, OUTPUT);
  
  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
    while (1);
  }

  Serial.println(F("Attach sensor to finger with rubber band. Press any key to start conversion"));
  while (Serial.available() == 0) ; //wait until user presses a key
  Serial.read();

  byte ledBrightness = 60; //Options: 0=Off to 255=50mA
  byte sampleAverage = 4; //Options: 1, 2, 4, 8, 16, 32
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings

}
void measureSpO2() {
  digitalWrite(24,HIGH);
  digitalWrite(23,LOW);
  digitalWrite(25,LOW);
  digitalWrite(47,LOW);
  digitalWrite(49,LOW);
  float sum = 0;

#define MAX_BRIGHTNESS 255
#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
//Arduino Uno doesn't have enough SRAM to store 100 samples of IR led data and red led data in 32-bit format
//To solve this problem, 16-bit MSB of the sampled data will be truncated. Samples become 16-bit data.
uint16_t irBuffer[100]; //infrared LED sensor data
uint16_t redBuffer[100];  //red LED sensor data
#else
uint32_t irBuffer[100]; //infrared LED sensor data
uint32_t redBuffer[100];  //red LED sensor data
#endif

int32_t bufferLength; //data length
int32_t spo2; //SPO2 value
int8_t validSPO2; //indicator to show if the SPO2 calculation is valid
int32_t heartRate; //heart rate value
int8_t validHeartRate; //indicator to show if the heart rate calculation is valid

bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
  //read the first 100 samples, and determine the signal range
  Serial.println("Wait for 10 seconds");
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
  }

  //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

  //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
 
  
    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
    for (byte i = 25; i < 100; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }
    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
      
        particleSensor.check(); //Check the sensor for new data

      digitalWrite(readLED, !digitalRead(readLED)); //Blink onboard LED with every data read

      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
      particleSensor.nextSample(); //We're finished with this sample so move to next sample

      //send samples and calculation result to terminal program through UART
      a = (spo2);
      sum = sum + a;
      avg = sum/25;
    
    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  }
  Serial.print("Your SpO2 is:");Serial.println(avg);
  digitalWrite(52,HIGH);
  delay(1000);
  digitalWrite(52,LOW);
  digitalWrite(24,LOW);
  digitalWrite(25,HIGH);
}
